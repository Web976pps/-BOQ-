#!/usr/bin/env python3
"""
Upload/Download Functionality Test
Simulates file upload and tests download button functionality
"""

import os
import sys
import tempfile
import time
from pathlib import Path

# Add project root to path
sys.path.insert(0, '/workspace')

def test_pdf_upload_simulation():
    """Test PDF upload simulation using enhanced app functionality"""
    print("üìÅ TESTING FILE UPLOAD/DOWNLOAD FUNCTIONALITY")
    print("=" * 60)
    
    try:
        # Import the enhanced app functionality
        from enhanced_app import process_uploaded_file_enhanced
        
        # Test files to simulate upload
        test_files = [
            "architectural_test.pdf",
            "test_zones.pdf",
            "input/sample.pdf"
        ]
        
        upload_results = []
        
        for test_file in test_files:
            if os.path.exists(test_file):
                print(f"\nüìÑ Testing upload simulation: {test_file}")
                
                file_size = os.path.getsize(test_file)
                print(f"   File size: {file_size:,} bytes")
                
                try:
                    # Simulate file upload by reading the file
                    with open(test_file, 'rb') as f:
                        file_content = f.read()
                    
                    # Create a temporary file to simulate upload
                    with tempfile.NamedTemporaryFile(suffix='.pdf', delete=False) as temp_file:
                        temp_file.write(file_content)
                        temp_file.flush()
                        
                        # Process the file using enhanced functionality
                        start_time = time.time()
                        results = process_uploaded_file_enhanced(temp_file.name)
                        processing_time = time.time() - start_time
                        
                        # Clean up temp file
                        os.unlink(temp_file.name)
                    
                    if results:
                        zones_count = len(results.get('zones', []))
                        codes_count = len(results.get('codes', []))
                        
                        upload_results.append({
                            "file": test_file,
                            "success": True,
                            "zones": zones_count,
                            "codes": codes_count,
                            "processing_time": processing_time
                        })
                        
                        print(f"   ‚úÖ Upload simulation successful")
                        print(f"   üìä Results: {zones_count} zones, {codes_count} codes")
                        print(f"   ‚è±Ô∏è Processing time: {processing_time:.2f}s")
                    else:
                        print(f"   ‚ùå Upload simulation failed - no results")
                        upload_results.append({
                            "file": test_file,
                            "success": False,
                            "error": "No results returned"
                        })
                        
                except Exception as e:
                    print(f"   ‚ùå Upload simulation failed: {str(e)}")
                    upload_results.append({
                        "file": test_file,
                        "success": False,
                        "error": str(e)
                    })
            else:
                print(f"\n‚ùå Test file not found: {test_file}")
        
        return upload_results
        
    except Exception as e:
        print(f"‚ùå Upload simulation test failed: {str(e)}")
        return []


def test_download_functionality():
    """Test download functionality by checking CSV generation"""
    print("\nüíæ TESTING DOWNLOAD FUNCTIONALITY")
    print("=" * 60)
    
    try:
        # Import pandas for CSV functionality
        import pandas as pd
        
        # Create sample data that would be generated by the app
        sample_data = [
            {
                "Zone/Area": "INNOVATION HUB",
                "Code": "CH15",
                "Type": "CH",
                "Count": 1,
                "Confidence": 0.95
            },
            {
                "Zone/Area": "MEETING ROOM",
                "Code": "TB01", 
                "Type": "TB",
                "Count": 1,
                "Confidence": 0.98
            },
            {
                "Zone/Area": "CREATE SPACE",
                "Code": "C101",
                "Type": "C", 
                "Count": 1,
                "Confidence": 0.92
            }
        ]
        
        # Test CSV generation (simulating download functionality)
        with tempfile.NamedTemporaryFile(mode='w', suffix='.csv', delete=False) as temp_csv:
            df = pd.DataFrame(sample_data)
            df.to_csv(temp_csv.name, index=False, encoding='utf-8')
            
            # Verify CSV file was created
            if os.path.exists(temp_csv.name):
                file_size = os.path.getsize(temp_csv.name)
                print(f"‚úÖ CSV download simulation successful")
                print(f"   üìÑ File: {temp_csv.name}")
                print(f"   üìä Size: {file_size} bytes")
                print(f"   üìù Rows: {len(sample_data)} data rows")
                
                # Read back to verify content
                with open(temp_csv.name, 'r', encoding='utf-8') as f:
                    content = f.read()
                    if "INNOVATION HUB" in content and "CH15" in content:
                        print(f"   ‚úÖ CSV content verification passed")
                    else:
                        print(f"   ‚ùå CSV content verification failed")
                
                # Clean up
                os.unlink(temp_csv.name)
                
                return True
            else:
                print(f"‚ùå CSV file creation failed")
                return False
                
    except Exception as e:
        print(f"‚ùå Download functionality test failed: {str(e)}")
        return False


def test_streamlit_components():
    """Test Streamlit-specific components availability"""
    print("\nüéõÔ∏è TESTING STREAMLIT COMPONENTS")
    print("=" * 60)
    
    try:
        import streamlit as st
        
        components_available = []
        
        # Test key Streamlit components that would be used
        component_tests = [
            ("file_uploader", hasattr(st, 'file_uploader')),
            ("download_button", hasattr(st, 'download_button')),
            ("dataframe", hasattr(st, 'dataframe')),
            ("columns", hasattr(st, 'columns')),
            ("tabs", hasattr(st, 'tabs')),
            ("progress", hasattr(st, 'progress')),
            ("success", hasattr(st, 'success')),
            ("error", hasattr(st, 'error'))
        ]
        
        for component_name, available in component_tests:
            status = "‚úÖ" if available else "‚ùå"
            print(f"   {status} {component_name}: {'Available' if available else 'Missing'}")
            components_available.append(available)
        
        success_rate = sum(components_available) / len(components_available) * 100
        print(f"\nüìä Component availability: {success_rate:.1f}% ({sum(components_available)}/{len(components_available)})")
        
        return success_rate >= 90
        
    except Exception as e:
        print(f"‚ùå Streamlit components test failed: {str(e)}")
        return False


def main():
    """Main test execution"""
    print("üî• STREAMLIT UPLOAD/DOWNLOAD SMOKE TEST")
    print("=" * 80)
    
    # Run tests
    upload_results = test_pdf_upload_simulation()
    download_success = test_download_functionality()
    components_success = test_streamlit_components()
    
    # Summary
    print("\nüìä UPLOAD/DOWNLOAD TEST SUMMARY")
    print("=" * 80)
    
    successful_uploads = len([r for r in upload_results if r.get('success', False)])
    total_upload_tests = len(upload_results) if upload_results else 0
    
    print(f"üìÅ Upload Simulation: {successful_uploads}/{total_upload_tests} files processed successfully")
    if upload_results:
        for result in upload_results:
            if result.get('success'):
                print(f"   ‚úÖ {result['file']}: {result['zones']} zones, {result['codes']} codes")
            else:
                print(f"   ‚ùå {result['file']}: {result.get('error', 'Unknown error')}")
    
    print(f"üíæ Download Functionality: {'‚úÖ Working' if download_success else '‚ùå Failed'}")
    print(f"üéõÔ∏è Streamlit Components: {'‚úÖ Available' if components_success else '‚ùå Issues'}")
    
    # Overall assessment
    overall_tests = [
        successful_uploads > 0,
        download_success,
        components_success
    ]
    
    overall_success = sum(overall_tests) / len(overall_tests) * 100
    
    print(f"\nüéØ Overall Upload/Download Readiness: {overall_success:.1f}%")
    
    if overall_success >= 80:
        print("üéâ UPLOAD/DOWNLOAD TEST: PASSED - File functionality ready!")
    elif overall_success >= 60:
        print("‚ö†Ô∏è UPLOAD/DOWNLOAD TEST: PARTIAL - Some issues detected")
    else:
        print("‚ùå UPLOAD/DOWNLOAD TEST: FAILED - Significant issues found")
    
    print(f"\nüîó Test both applications:")
    print(f"   Enhanced App: http://localhost:8501")
    print(f"   Standard App: http://localhost:8502")


if __name__ == "__main__":
    main()