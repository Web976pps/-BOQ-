"""CSV and overlay export utilities."""
from __future__ import annotations

from pathlib import Path
from typing import List, Dict, Any

import cv2
import pandas as pd
from loguru import logger
from importlib import resources

__all__ = ["write_csvs", "write_overlays"]


# ---------------------------------------------------------------------------
# CSV exports
# ---------------------------------------------------------------------------

VERSION_FILE = Path(__file__).resolve().parents[2] / "VERSION"
VERSION_STR = VERSION_FILE.read_text().strip() if VERSION_FILE.exists() else "0.0.0"


def write_csvs(rows: List[Dict[str, Any]], output_dir: str | Path) -> None:  # noqa: D401
    out_dir = Path(output_dir)
    out_dir.mkdir(parents=True, exist_ok=True)

    df = pd.DataFrame(rows)

    header_comment = f"# Generated by pdf_code_extractor v{VERSION_STR}\n"

    def _write(df: pd.DataFrame, filename: str):
        fpath = out_dir / filename
        with fpath.open("w", encoding="utf-8", newline="") as fh:
            fh.write(header_comment)
        df.to_csv(fpath, mode="a", index=False)

    # Row-level instances
    _write(df, "row_level_instances.csv")

    # Unique zone-code pairs
    unique = df.drop_duplicates(subset=["zone", "code"])
    _write(unique, "unique_zone_codes.csv")

    # Zone-prefix summary
    zp_summary = (
        unique.groupby(["zone", "prefix"]).size().reset_index(name="count").sort_values(["zone", "prefix"])
    )
    _write(zp_summary, "zone_prefix_summary.csv")

    # Global prefix summary
    global_prefix = unique.groupby("prefix").size().reset_index(name="count").sort_values("prefix")
    _write(global_prefix, "global_prefix_summary.csv")

    logger.info(f"Exports » CSVs written to {out_dir}")


# ---------------------------------------------------------------------------
# Overlays
# ---------------------------------------------------------------------------

def _draw_bbox(img, bbox, color, label: str | None = None):
    x, y, w, h = map(int, bbox)
    cv2.rectangle(img, (x, y), (x + w, y + h), color, 2)
    if label:
        cv2.putText(img, label, (x, y - 5), cv2.FONT_HERSHEY_SIMPLEX, 0.5, color, 1, cv2.LINE_AA)


def write_overlays(rows: List[Dict[str, Any]], zones: List[Dict[str, Any]], page_images: Dict[int, str | Path], output_dir: str | Path) -> None:  # noqa: D401
    """Draw code and zone bounding boxes on page images and save PNG overlays."""
    out_dir = Path(output_dir)
    out_dir.mkdir(parents=True, exist_ok=True)

    # Colours
    CODE_COLOR = (0, 255, 0)  # green
    ZONE_COLOR = (0, 0, 255)  # red

    # Group by page
    pages = set(page_images.keys())
    for page in pages:
        img_path = Path(page_images[page])
        img = cv2.imread(str(img_path))
        if img is None:
            logger.warning(f"Could not read page image: {img_path}")
            continue

        for z in [z for z in zones if z["page"] == page]:
            _draw_bbox(img, z["bbox"], ZONE_COLOR, z["zone"])

        for r in [r for r in rows if r["page"] == page]:
            label = r["code"] if r["zone"] != "__UNASSIGNED__" else f"{r['code']}(?)"
            _draw_bbox(img, r["bbox"], CODE_COLOR, label)

        out_file = out_dir / f"overlay_page_{page:04d}.png"
        cv2.imwrite(str(out_file), img)

    logger.info(f"Exports » Overlay images written to {out_dir}") 